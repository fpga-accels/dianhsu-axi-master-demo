/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
// Add BSP header files
#include <stdlib.h>  // Standard C functions, e.g. exit()
#include <stdbool.h> // Provides a Boolean data type for ANSI/ISO-C
#include "xparameters.h" // Parameter definitions for processor periperals
#include "xscugic.h"     // Processor interrupt controller device driver
#include "xexample.h"   // Device driver for HLS HW block

// HLS macc HW instance
XExample Example;
//Interrupt Controller Instance
XScuGic ScuGic;
// Global variable definitions - used by ISR
volatile static int RunExample = 0;
volatile static int ResultAvailExample = 0;

// Setup and helper functions
int setup_interrupt();
int example_init(XExample *examplePtr);
void example_start(void *InstancePtr);
// The ISR prototype
void example_isr(void *InstancePtr);

int main() {
	print("Program to test communication with HLS MACC block in PL\n\r");

	int status;
	for(i=0;i<50;i++)
	    	Xil_Out32(XPAR_PS7_DDR_0_S_AXI_BASEADDR+i*4,i);
	//Setup the matrix mult
	status = example_init(&Example);
	if (status != XST_SUCCESS) {
		print("HLS peripheral setup failed\n\r");
		exit(-1);
	}
	//Setup the interrupt
	status = setup_interrupt();
	if (status != XST_SUCCESS) {
		print("Interrupt setup failed\n\r");
		exit(-1);
	}

	//set the input parameters of the HLS block
	XExample_Set_a(&Example, XPAR_PS7_DDR_0_S_AXI_BASEADDR);

	if (XExample_IsReady(&Example))
		print("HLS peripheral is ready.  Starting... ");
	else {
		print("!!! HLS peripheral is not ready! Exiting...\n\r");
		exit(-1);
	}

	example_start(&Example);
	while (!ResultAvailExample)
		; // spin
	print("Interrupt received from HLS HW.\n\r");

	//call the software version of the function
	for (int i = 0; i < 50; ++i) {
		printf("%4d ", a[i]);
	}
	printf("\n\r");
	cleanup_platform();
	return status;
}

int example_init(XExample *examplePtr) {
	XExample_Config *cfgPtr;
	int status;

	cfgPtr = XExample_LookupConfig(XPAR_XEXAMPLE_0_DEVICE_ID);
	if (!cfgPtr) {
		print("ERROR: Lookup of acclerator configuration failed.\n\r");
		return XST_FAILURE;
	}
	status = XExample_CfgInitialize(examplePtr, cfgPtr);
	if (status != XST_SUCCESS) {
		print("ERROR: Could not initialize accelerator.\n\r");
		return XST_FAILURE;
	}
	return status;
}

void example_start(void *InstancePtr) {
	XExample *pAccelerator = (XExample *) InstancePtr;
	XExample_InterruptEnable(pAccelerator, 1);
	XExample_InterruptGlobalEnable(pAccelerator);
	XExample_Start(pAccelerator);
}

void example_isr(void *InstancePtr) {
	XExample *pAccelerator = (XExample *) InstancePtr;

	//Disable the global interrupt
	XExample_InterruptGlobalDisable(pAccelerator);
	//Disable the local interrupt
	XExample_InterruptDisable(pAccelerator, 0xffffffff);

	// clear the local interrupt
	XExample_InterruptClear(pAccelerator, 1);

	ResultAvailExample = 1;
	// restart the core if it should run again
	if (RunExample) {
		example_start(pAccelerator);
	}
}

int setup_interrupt() {
	//This functions sets up the interrupt on the ARM
	int result;
	XScuGic_Config *pCfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
	if (pCfg == NULL) {
		print("Interrupt Configuration Lookup Failed\n\r");
		return XST_FAILURE;
	}
	result = XScuGic_CfgInitialize(&ScuGic, pCfg, pCfg->CpuBaseAddress);
	if (result != XST_SUCCESS) {
		return result;
	}
	// self test
	result = XScuGic_SelfTest(&ScuGic);
	if (result != XST_SUCCESS) {
		return result;
	}
	// Initialize the exception handler
	Xil_ExceptionInit();
	// Register the exception handler
	//print("Register the exception handler\n\r");
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler, &ScuGic);
	//Enable the exception handler
	Xil_ExceptionEnable()
	;
	// Connect the Adder ISR to the exception table
	//print("Connect the Adder ISR to the Exception handler table\n\r");
	result = XScuGic_Connect(&ScuGic, XPAR_FABRIC_EXAMPLE_0_INTERRUPT_INTR,
			(Xil_InterruptHandler) example_isr, &Example);
	if (result != XST_SUCCESS) {
		return result;
	}
	//print("Enable the Adder ISR\n\r");
	XScuGic_Enable(&ScuGic, XPAR_FABRIC_EXAMPLE_0_INTERRUPT_INTR);
	return XST_SUCCESS;
}
